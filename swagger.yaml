---
swagger: "2.0"
info:
  version: "2023-02-03T12:20:42Z"
  title: "Reserve & Collect (sls) Marius V1 Test"
host: "api.dufry.cloud"
basePath: "/u"
schemes:
- "https"
paths:
  /v1/{store_identifier}/creditmemos:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "store_identifier"
        in: "path"
        required: false
        type: "string"
      - name: "created_at"
        in: "query"
        required: false
        type: "string"
      - name: "page"
        in: "query"
        required: false
        type: "string"
      - name: "pagesize"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - AuthorizerV1: []
      x-amazon-apigateway-request-validator: "Validate all"
      x-amazon-apigateway-integration:
        uri: "${aws-lambda-arn-template}:${name-lambda-mag2-post}-${stage}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  /v1/{store_identifier}/invoices:
    get:
      description: "Retrieves information from Invoices"
      produces:
      - "application/json"
      parameters:
      - name: "store_identifier"
        in: "path"
        required: false
        type: "string"
      - name: "created_at"
        in: "query"
        required: true
        type: "string"
      - name: "page"
        in: "query"
        required: false
        type: "string"
      - name: "pagesize"
        in: "query"
        required: false
        type: "string"
      - name: "Authorization"
        in: "header"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        400:
          description: "400 response"
        500:
          description: "500 response"
        401:
          description: "401 response"
        403:
          description: "403 response"
        404:
          description: "404 response"
        405:
          description: "405 response"
        406:
          description: "406 response"
      security:
      - AuthorizerV1: []
      x-amazon-apigateway-request-validator: "Validate all"
      x-amazon-apigateway-integration:
        uri: "${aws-lambda-arn-template}:${name-lambda-mag2-post}-${stage}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  /v1/{store_identifier}/sap/invoices:
    get:
      description: "Retrieves information from Invoices"
      produces:
      - "application/json"
      parameters:
      - name: "store_identifier"
        in: "path"
        required: false
        type: "string"
      - name: "created_at"
        in: "query"
        required: true
        type: "string"
      - name: "page"
        in: "query"
        required: false
        type: "string"
      - name: "pagesize"
        in: "query"
        required: false
        type: "string"
      - name: "Authorization"
        in: "header"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        400:
          description: "400 response"
        500:
          description: "500 response"
        401:
          description: "401 response"
        403:
          description: "403 response"
        404:
          description: "404 response"
        405:
          description: "405 response"
        406:
          description: "406 response"
      security:
      - AuthorizerV1: []
      x-amazon-apigateway-request-validator: "Validate all"
      x-amazon-apigateway-integration:
        uri: "${aws-lambda-arn-template}:${name-lambda-mag2-post}-${stage}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  /v1/{store_identifier}/shipments:
    get:
      description: "Retrieves information from shipments"
      produces:
      - "application/json"
      parameters:
      - name: "store_identifier"
        in: "path"
        required: false
        type: "string"
      - name: "created_at"
        in: "query"
        required: true
        type: "string"
      - name: "page"
        in: "query"
        required: false
        type: "string"
      - name: "pagesize"
        in: "query"
        required: false
        type: "string"
      - name: "Authorization"
        in: "header"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        400:
          description: "400 response"
        500:
          description: "500 response"
        401:
          description: "401 response"
        403:
          description: "403 response"
        404:
          description: "404 response"
        405:
          description: "405 response"
        406:
          description: "406 response"
      security:
      - AuthorizerV1: []
      x-amazon-apigateway-request-validator: "Validate all"
      x-amazon-apigateway-integration:
        uri: "${aws-lambda-arn-template}:${name-lambda-mag2-post}-${stage}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  /v1/{store_identifier}/order/{id}/invoice:
    post:
      produces:
      - "application/json"
      parameters:
      - name: "store_identifier"
        in: "path"
        required: false
        type: "string"
      - name: "Authorization"
        in: "header"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        400:
          description: "400 response"
        500:
          description: "500 response"
        401:
          description: "401 response"
        403:
          description: "403 response"
        404:
          description: "404 response"
        405:
          description: "405 response"
        406:
          description: "406 response"
      security:
      - AuthorizerV1: []
      x-amazon-apigateway-request-validator: "Validate all"
      x-amazon-apigateway-integration:
        uri: "${aws-lambda-arn-template}:${name-lambda-mag2-post}-${stage}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  /v1/{store_identifier}/order/{id}/ship:
    post:
      produces:
      - "application/json"
      parameters:
      - name: "store_identifier"
        in: "path"
        required: false
        type: "string"
      - name: "Authorization"
        in: "header"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        400:
          description: "400 response"
        500:
          description: "500 response"
        401:
          description: "401 response"
        403:
          description: "403 response"
        404:
          description: "404 response"
        405:
          description: "405 response"
        406:
          description: "406 response"
      security:
      - AuthorizerV1: []
      x-amazon-apigateway-request-validator: "Validate all"
      x-amazon-apigateway-integration:
        uri: "${aws-lambda-arn-template}:${name-lambda-mag2-post}-${stage}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  /v1/{store_identifier}/orders:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "store"
        in: "query"
        required: false
        type: "string"
      - name: "created_at"
        in: "query"
        required: false
        type: "string"
      - name: "pagesize"
        in: "query"
        required: false
        type: "string"
      - name: "store_identifier"
        in: "path"
        required: false
        type: "string"
      - name: "status"
        in: "query"
        required: true
        type: "string"
      - name: "operator"
        description: "Query filter operator"
        in: "query"
        required: false
        type: "string"
      - name: "page"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        400:
          description: "400 response"
        500:
          description: "500 response"
        401:
          description: "401 response"
        403:
          description: "403 response"
        404:
          description: "404 response"
        405:
          description: "405 response"
        406:
          description: "406 response"
      security:
      - AuthorizerV1: []
      x-amazon-apigateway-request-validator: "Validate all"
      x-amazon-apigateway-integration:
        uri: "${aws-lambda-arn-template}:${name-lambda-mag2-post}-${stage}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  /v1/{store_identifier}/orders/{id}:
    get:
      description: |
        Retrieves information for one order
      produces:
      - "application/json"
      parameters:
      - name: "store_identifier"
        description: "Store ID"
        in: "path"
        required: false
        type: "string"
      - name: "created_at"
        description: "Query filter by date of payment"
        in: "query"
        required: false
        type: "string"
      - name: "page"
        description: "Query page number"
        in: "query"
        required: false
        type: "string"
      - name: "pagesize"
        description: "Query page size. Default value 10"
        in: "query"
        required: false
        type: "string"
      - name: "Authorization"
        description: "Access token for authorization"
        in: "header"
        required: false
        type: "string"
      - name: "id"
        description: "Order Id to be request"
        in: "path"
        required: true
        type: "string"
      - name: "is_external"
        description: "Id is an external one"
        in: "query"
        required: false
        type: "string"
      - name: "is_entity_id"
        description: "Id is entity id"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        400:
          description: "400 response"
        500:
          description: "500 response"
        401:
          description: "401 response"
        403:
          description: "403 response"
        404:
          description: "404 response"
        405:
          description: "405 response"
        406:
          description: "406 response"
      security:
      - AuthorizerV1: []
      x-amazon-apigateway-request-validator: "Validate all"
      x-amazon-apigateway-integration:
        uri: "${aws-lambda-arn-template}:${name-lambda-mag2-post}-${stage}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  /v1/{store_identifier}/orders/{id}/cancel:
    post:
      produces:
      - "application/json"
      parameters:
      - name: "store_identifier"
        in: "path"
        required: false
        type: "string"
      - name: "Authorization"
        in: "header"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        400:
          description: "400 response"
        500:
          description: "500 response"
        401:
          description: "401 response"
        403:
          description: "403 response"
        404:
          description: "404 response"
        405:
          description: "405 response"
        406:
          description: "406 response"
      security:
      - AuthorizerV1: []
      x-amazon-apigateway-request-validator: "Validate all"
      x-amazon-apigateway-integration:
        uri: "${aws-lambda-arn-template}:${name-lambda-mag2-post}-${stage}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  /v1/{store_identifier}/orders/{id}/comments:
    post:
      produces:
      - "application/json"
      parameters:
      - name: "store_identifier"
        in: "path"
        required: false
        type: "string"
      - name: "Authorization"
        in: "header"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        400:
          description: "400 response"
        500:
          description: "500 response"
        401:
          description: "401 response"
        403:
          description: "403 response"
        404:
          description: "404 response"
        405:
          description: "405 response"
        406:
          description: "406 response"
      security:
      - AuthorizerV1: []
      x-amazon-apigateway-request-validator: "Validate all"
      x-amazon-apigateway-integration:
        uri: "${aws-lambda-arn-template}:${name-lambda-mag2-post}-${stage}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  /v1/{store_identifier}/pim/categories:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "updated"
        in: "query"
        required: false
        type: "string"
      - name: "store_identifier"
        in: "path"
        required: false
        type: "string"
      - name: "parentid"
        in: "path"
        required: false
        type: "string"
      - name: "page"
        in: "query"
        required: false
        type: "string"
      - name: "pagesize"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - AuthorizerV1: []
      x-amazon-apigateway-request-validator: "Validate all"
      x-amazon-apigateway-integration:
        uri: "${aws-lambda-arn-template}:${name-lambda-mag2-post}-${stage}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  /v1/{store_identifier}/pim/categories/{categoryid+}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "categoryid"
        in: "path"
        required: true
        type: "string"
      - name: "store_identifier"
        in: "path"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      x-amazon-apigateway-request-validator: "Validate all"
      x-amazon-apigateway-integration:
        uri: "${aws-lambda-arn-template}:${name-lambda-mag2-post}-${stage}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        cacheNamespace: "e47ooi"
        cacheKeyParameters:
        - "method.request.path.categoryid"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  /v1/{store_identifier}/pim/products:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "updated"
        in: "query"
        required: false
        type: "string"
      - name: "store_identifier"
        in: "path"
        required: false
        type: "string"
      - name: "page"
        in: "query"
        required: false
        type: "string"
      - name: "pagesize"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - AuthorizerV1: []
      x-amazon-apigateway-request-validator: "Validate all"
      x-amazon-apigateway-integration:
        uri: "${aws-lambda-arn-template}:${name-lambda-mag2-post}-${stage}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  /v1/{store_identifier}/pim/products/{productid+}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "productid"
        in: "path"
        required: true
        type: "string"
      - name: "store_identifier"
        in: "path"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - AuthorizerV1: []
      x-amazon-apigateway-request-validator: "Validate all"
      x-amazon-apigateway-integration:
        uri: "${aws-lambda-arn-template}:${name-lambda-mag2-post}-${stage}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        cacheNamespace: "xfkulm"
        cacheKeyParameters:
        - "method.request.path.productid"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  /v1/{store_identifier}/promotions:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "store_identifier"
        in: "path"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - AuthorizerV1: []
      x-amazon-apigateway-request-validator: "Validate all"
      x-amazon-apigateway-integration:
        uri: "${aws-lambda-arn-template}:${name-lambda-mag2-post}-${stage}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  /v1/{store_identifier}/reserve:
    post:
      description: "Interface to create a guest basket"
      produces:
      - "application/json"
      parameters:
      - name: "store_identifier"
        in: "path"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - AuthorizerV1: []
      x-amazon-apigateway-request-validator: "Validate all"
      x-amazon-apigateway-integration:
        uri: "${aws-lambda-arn-template}:${name-lambda-mag2-post}-${stage}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    put:
      description: "Interface that creates an order"
      produces:
      - "application/json"
      parameters:
      - name: "store_identifier"
        in: "path"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - AuthorizerV1: []
      x-amazon-apigateway-request-validator: "Validate all"
      x-amazon-apigateway-integration:
        uri: "${aws-lambda-arn-template}:${name-lambda-mag2-post}-${stage}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  /v1/{store_identifier}/reserve/{cart+}:
    get:
      description: "Interface to retrieve basket information"
      produces:
      - "application/json"
      parameters:
      - name: "cart"
        in: "path"
        required: true
        type: "string"
      - name: "store_identifier"
        in: "path"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - AuthorizerV1: []
      x-amazon-apigateway-request-validator: "Validate all"
      x-amazon-apigateway-integration:
        uri: "${aws-lambda-arn-template}:${name-lambda-mag2-post}-${stage}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        cacheNamespace: "gn02qp"
        cacheKeyParameters:
        - "method.request.path.cart"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    post:
      description: "Interface to add items to the basket"
      produces:
      - "application/json"
      parameters:
      - name: "cart"
        in: "path"
        required: true
        type: "string"
      - name: "store_identifier"
        in: "path"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - AuthorizerV1: []
      x-amazon-apigateway-request-validator: "Validate all"
      x-amazon-apigateway-integration:
        uri: "${aws-lambda-arn-template}:${name-lambda-mag2-post}-${stage}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        cacheNamespace: "gn02qp"
        cacheKeyParameters:
        - "method.request.path.cart"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    put:
      description: "Interface to confirm order creation from current basket "
      produces:
      - "application/json"
      parameters:
      - name: "cart"
        in: "path"
        required: true
        type: "string"
      - name: "store_identifier"
        in: "path"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - AuthorizerV1: []
      x-amazon-apigateway-request-validator: "Validate all"
      x-amazon-apigateway-integration:
        uri: "${aws-lambda-arn-template}:${name-lambda-mag2-post}-${stage}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        cacheNamespace: "gn02qp"
        cacheKeyParameters:
        - "method.request.path.cart"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    delete:
      description: "Interface to remove items from the basket"
      produces:
      - "application/json"
      parameters:
      - name: "cart"
        in: "path"
        required: true
        type: "string"
      - name: "store_identifier"
        in: "path"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - AuthorizerV1: []
      x-amazon-apigateway-request-validator: "Validate all"
      x-amazon-apigateway-integration:
        uri: "${aws-lambda-arn-template}:${name-lambda-mag2-post}-${stage}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        cacheNamespace: "gn02qp"
        cacheKeyParameters:
        - "method.request.path.cart"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  /v1/{store_identifier}/invoices/picked:
    get:
      description: "Retrieves information from picked orders"
      produces:
      - "application/json"
      parameters:
      - name: "store_identifier"
        in: "path"
        required: false
        type: "string"
      - name: "created_at"
        in: "query"
        required: true
        type: "string"
      - name: "page"
        in: "query"
        required: false
        type: "string"
      - name: "pagesize"
        in: "query"
        required: false
        type: "string"
      - name: "Authorization"
        in: "header"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        400:
          description: "400 response"
        500:
          description: "500 response"
        401:
          description: "401 response"
        403:
          description: "403 response"
        404:
          description: "404 response"
        405:
          description: "405 response"
        406:
          description: "406 response"
      security:
      - AuthorizerV1: []
      x-amazon-apigateway-request-validator: "Validate all"
      x-amazon-apigateway-integration:
        uri: "${aws-lambda-arn-template}:${name-lambda-mag2-post}-${stage}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  /v1/{store_identifier}/stockblock:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "store_identifier"
        in: "path"
        required: false
        type: "string"
      - name: "date"
        in: "query"
        required: true
        type: "string"
      - name: "page"
        in: "query"
        required: false
        type: "string"
      - name: "pagesize"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        400:
          description: "400 response"
        500:
          description: "500 response"
        401:
          description: "401 response"
        403:
          description: "403 response"
        404:
          description: "404 response"
        405:
          description: "405 response"
        406:
          description: "406 response"
      security:
      - AuthorizerV1: []
      x-amazon-apigateway-request-validator: "Validate all"
      x-amazon-apigateway-integration:
        uri: "${aws-lambda-arn-template}:${name-lambda-mag2-post}-${stage}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
  /v1/{store_identifier}/stockunblock:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "store"
        in: "query"
        required: false
        type: "string"
      - name: "store_identifier"
        in: "path"
        required: false
        type: "string"
      - name: "date"
        in: "query"
        required: true
        type: "string"
      - name: "Authorization"
        in: "header"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        400:
          description: "400 response"
        500:
          description: "500 response"
        401:
          description: "401 response"
        403:
          description: "403 response"
        404:
          description: "404 response"
        405:
          description: "405 response"
        406:
          description: "406 response"
      security:
      - AuthorizerV1: []
      x-amazon-apigateway-request-validator: "Validate all"
      x-amazon-apigateway-integration:
        uri: "${aws-lambda-arn-template}:${name-lambda-mag2-post}-${stage}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
securityDefinitions:
  AuthorizerV1:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    x-amazon-apigateway-authtype: "custom"
    x-amazon-apigateway-authorizer:
      authorizerUri: "${aws-lambda-arn-template}:${name-lambda-mag2-auth}-${stage}/invocations"
      authorizerResultTtlInSeconds: 0
      type: "token"
definitions:
  Empty:
    type: "object"
    title: "Empty Schema"
  Error:
    type: "object"
    properties:
      message:
        type: "string"
    title: "Error Schema"
x-amazon-apigateway-documentation:
  version: "V1.0"
  createdDate: "2019-01-14T11:19:39Z"
  documentationParts:
  - location:
      type: "METHOD"
      path: "/v1/{store_identifier}/invoices"
      method: "GET"
    properties:
      description: "Retrieves information from Invoices"
  - location:
      type: "METHOD"
      path: "/v1/{store_identifier}/reserve/{cart+}"
      method: "DELETE"
    properties:
      description: "Interface to remove items from the basket"
  - location:
      type: "METHOD"
      path: "/v1/{store_identifier}/reserve/{cart+}"
      method: "GET"
    properties:
      description: "Interface to retrieve basket information"
  - location:
      type: "METHOD"
      path: "/v1/{store_identifier}/reserve/{cart+}"
      method: "POST"
    properties:
      description: "Interface to add items to the basket"
  - location:
      type: "METHOD"
      path: "/v1/{store_identifier}/reserve/{cart+}"
      method: "PUT"
    properties:
      description: "Interface to confirm order creation from current basket "
  - location:
      type: "METHOD"
      path: "/v1/{store_identifier}/reserve"
      method: "POST"
    properties:
      description: "Interface to create a guest basket"
  - location:
      type: "METHOD"
      path: "/v1/{store_identifier}/reserve"
      method: "PUT"
    properties:
      description: "Interface that creates an order"
  - location:
      type: "METHOD"
      path: "/{store_identifier}/invoices"
      method: "GET"
    properties:
      description: "List of invoices issued per date \nUsed only in online payment\
        \ processes (Emporium)."
  - location:
      type: "METHOD"
      path: "/{store_identifier}/order/{id}/invoice"
      method: "POST"
    properties:
      description: "Place invoicing action. Used by PoS for payment post"
  - location:
      type: "METHOD"
      path: "/{store_identifier}/order/{id}/ship"
      method: "POST"
    properties:
      description: "Place shipping/picking action. Used by warehouse or store staff\
        \ for picking register"
  - location:
      type: "METHOD"
      path: "/{store_identifier}/orders/{id}/cancel"
      method: "POST"
    properties:
      description: "Cancel an order if it is impossible to serve. No body is needed"
  - location:
      type: "METHOD"
      path: "/{store_identifier}/orders/{id}/comments"
      method: "POST"
    properties:
      description: "Add a comment to order history and change status"
  - location:
      type: "METHOD"
      path: "/{store_identifier}/orders"
      method: "GET"
    properties:
      description: "List orders by date, status or store"
  - location:
      type: "METHOD"
      path: "/{store_identifier}/stockblokade"
      method: "GET"
    properties:
      description: "Method to get the store orders to block along with theirs products\
        \ qties"
  - location:
      type: "PATH_PARAMETER"
      path: "/{store_identifier}/order/{id}/ship"
      method: "POST"
      name: "id"
    properties:
      description: "Order Id to be updated"
  - location:
      type: "PATH_PARAMETER"
      path: "/{store_identifier}/orders/{id}/cancel"
      method: "POST"
      name: "id"
    properties:
      description: "Order Id retrieved from order listing"
  - location:
      type: "PATH_PARAMETER"
      path: "/{store_identifier}/order/{id}/ship"
      method: "POST"
      name: "store_identifier"
    properties:
      description: "store_identifier name"
  - location:
      type: "QUERY_PARAMETER"
      path: "/{store_identifier}/invoices"
      method: "GET"
      name: "created_at"
    properties:
      description: "Query filter by date of payment"
  - location:
      type: "QUERY_PARAMETER"
      path: "/{store_identifier}/orders"
      method: "GET"
      name: "created_at"
    properties:
      description: "Query filter orders by date"
  - location:
      type: "QUERY_PARAMETER"
      path: "/{store_identifier}/stockunblock"
      method: "GET"
      name: "date"
    properties:
      description: "Daily products to release"
  - location:
      type: "QUERY_PARAMETER"
      path: "/{store_identifier}/invoices"
      method: "GET"
      name: "page"
    properties:
      description: "Query page number"
  - location:
      type: "QUERY_PARAMETER"
      path: "/{store_identifier}/orders"
      method: "GET"
      name: "page"
    properties:
      description: "Query filter page"
  - location:
      type: "QUERY_PARAMETER"
      path: "/{store_identifier}/stockblokade"
      method: "GET"
      name: "page"
    properties:
      description: "Query filter page"
  - location:
      type: "QUERY_PARAMETER"
      path: "/{store_identifier}/invoices"
      method: "GET"
      name: "pagesize"
    properties:
      description: "Query page size. Default value 10"
  - location:
      type: "QUERY_PARAMETER"
      path: "/{store_identifier}/orders"
      method: "GET"
      name: "pagesize"
    properties:
      description: "Query filter page size"
  - location:
      type: "QUERY_PARAMETER"
      path: "/{store_identifier}/stockblokade"
      method: "GET"
      name: "pagesize"
    properties:
      description: "Query filter page size"
  - location:
      type: "QUERY_PARAMETER"
      path: "/{store_identifier}/orders"
      method: "GET"
      name: "status"
    properties:
      description: "Query filter orders by status"
  - location:
      type: "QUERY_PARAMETER"
      path: "/{store_identifier}/stockblokade"
      method: "GET"
      name: "status"
    properties:
      description: "Should always be waiting_for_blokade"
  - location:
      type: "QUERY_PARAMETER"
      path: "/{store_identifier}/orders"
      method: "GET"
      name: "store"
    properties:
      description: "Query filter orders by store"
  - location:
      type: "REQUEST_BODY"
      path: "/{store_identifier}/order/{id}/invoice"
      method: "POST"
    properties:
      description: "Example:\r\n {\r\n  \"description\": \"Example:\r\n {\r\n  \"\
        items\": [\r\n    {\r\n      \"order_item_id\": 0, //order item id\r\n   \
        \   \"qty\": 0 //item quantities invoiced\r\n    }\r\n  ],\r\n  \"notify\"\
        : true, //notify to customer flag\r\n  \"appendComment\": true, //add comment\
        \ to invoice entity\r\n  \"comment\": {\r\n    \"comment\": \"string\", //comment\
        \ text\r\n  }\r\n}\"\r\n}"
  - location:
      type: "REQUEST_BODY"
      path: "/{store_identifier}/order/{id}/ship"
      method: "POST"
    properties:
      description: "Example: \r\n {\r\n  \"items\": [\r\n    {\r\n      \"order_item_id\"\
        : 0, //order item id, not SKU\r\n      \"qty\": 0 //qty to be marked as shipped\r\
        \n    }\r\n  ],\r\n  \"notify\": true, //notify to customer flag\r\n  \"appendComment\"\
        : true, //append comment to shipment flag\r\n  \"comment\": {\r\n    \"comment\"\
        : \"string\", //comment text\r\n  }\r\n}"
  - location:
      type: "REQUEST_BODY"
      path: "/{store_identifier}/orders/{id}/cancel"
      method: "POST"
    properties:
      description: "Should be empty"
  - location:
      type: "REQUEST_BODY"
      path: "/{store_identifier}/orders/{id}/comments"
      method: "POST"
    properties:
      description: "Example:\r\n{\r\n  \"statusHistory\": {\r\n    \"comment\": \"\
        string\",\r\n    \"entity_id\": 0,  //Order identifier\r\n    \"is_customer_notified\"\
        : 0,\r\n    \"is_visible_on_front\": 0,\r\n    \"status\": \"string\" //Can\
        \ be one of this [wh_processing|ready_to_collect|shipped]\r\n  }\r\n}"
  - location:
      type: "REQUEST_HEADER"
      path: "/{store_identifier}/invoices"
      method: "GET"
      name: "Authorization"
    properties:
      description: "Access token for authorization"
  - location:
      type: "REQUEST_HEADER"
      path: "/{store_identifier}/order/{id}/invoice"
      method: "POST"
      name: "Authorization"
    properties:
      description: "Access token for authorization"
  - location:
      type: "REQUEST_HEADER"
      path: "/{store_identifier}/order/{id}/ship"
      method: "POST"
      name: "Authorization"
    properties:
      description: "Access token for authorization"
  - location:
      type: "REQUEST_HEADER"
      path: "/{store_identifier}/orders/{id}/cancel"
      method: "POST"
      name: "Authorization"
    properties:
      description: "Access token for authorization"
  - location:
      type: "REQUEST_HEADER"
      path: "/{store_identifier}/orders/{id}/comments"
      method: "POST"
      name: "Authorization"
    properties:
      description: "Access token for authorization"
  - location:
      type: "REQUEST_HEADER"
      path: "/{store_identifier}/orders"
      method: "GET"
      name: "Authorization"
    properties:
      description: "Access token for authorization"
  - location:
      type: "REQUEST_HEADER"
      path: "/{store_identifier}/stockblokade"
      method: "GET"
      name: "Authorization"
    properties:
      description: "Access token for authorization"
  - location:
      type: "REQUEST_HEADER"
      path: "/{store_identifier}/stockunblock"
      method: "GET"
      name: "Authorization"
    properties:
      description: "Access token for authorization"
  - location:
      type: "RESOURCE"
    properties:
      description: "API for Reserve & Collect handling"
  - location:
      type: "RESOURCE"
      path: "/v1/{store_identifier}/creditmemos"
    properties:
      description: "After a customer places and pays for an order and an invoice has\
        \ been issued, the merchant can create a credit memo to refund all or part\
        \ of the amount paid for any returned or undelivered items. The memo restores\
        \ funds to the customer account so that the customer can make future purchases."
  - location:
      type: "RESOURCE"
      path: "/v1/{store_identifier}/invoices"
    properties:
      description: "An invoice is a record of the receipt of payment for an order."
  - location:
      type: "RESOURCE"
      path: "/v1/{store_identifier}/order"
    properties:
      description: "An order is a document that a web store issues to a customer.\
        \ Magento generates a sales order that lists the product items, billing and\
        \ shipping addresses, and shipping and payment methods."
  - location:
      type: "RESOURCE"
      path: "/v1/{store_identifier}/orders"
    properties:
      description: "An order is a document that a web store issues to a customer.\
        \ Magento generates a sales order that lists the product items, billing and\
        \ shipping addresses, and shipping and payment methods."
  - location:
      type: "RESOURCE"
      path: "/v1/{store_identifier}/pim/categories/{categoryid+}"
    properties:
      description: "Interface to retrieves one category information"
  - location:
      type: "RESOURCE"
      path: "/v1/{store_identifier}/pim/categories"
    properties:
      description: "Interface to retrieves category collection information"
  - location:
      type: "RESOURCE"
      path: "/v1/{store_identifier}/pim/products/{productid+}"
    properties:
      description: "Interface to retrieves one product information"
  - location:
      type: "RESOURCE"
      path: "/v1/{store_identifier}/pim/products"
    properties:
      description: "Interface to retrieves product collections information"
  - location:
      type: "RESOURCE"
      path: "/v1/{store_identifier}/pim"
    properties:
      description: "Interface to retrieves product collections and category information"
  - location:
      type: "RESOURCE"
      path: "/v1/{store_identifier}/reserve"
    properties:
      description: "Interface to handle orders"
  - location:
      type: "RESOURCE"
      path: "/v1/{store_identifier}/stockblock"
    properties:
      description: "Interface to retrieve the stock items to be blocked by date"
  - location:
      type: "RESOURCE"
      path: "/v1/{store_identifier}/stockunblock"
    properties:
      description: "Interface to retrieve the stock items to be unblocked by date"
  - location:
      type: "RESOURCE"
      path: "/{store_identifier}/invoices"
    properties:
      description: "Access to invoices issued. Needed for bank reconciliation"
  - location:
      type: "RESOURCE"
      path: "/{store_identifier}/order/{id}/invoice"
    properties:
      description: "Access to order invoicing related actions"
  - location:
      type: "RESOURCE"
      path: "/{store_identifier}/order/{id}/ship"
    properties:
      description: "Access to order shipping related actions"
  - location:
      type: "RESOURCE"
      path: "/{store_identifier}/order"
    properties:
      description: "Access to order update. Needed for order picking and invoicing"
  - location:
      type: "RESOURCE"
      path: "/{store_identifier}/orders/{id}/cancel"
    properties:
      description: "Cancel an order if it is impossible to serve"
  - location:
      type: "RESOURCE"
      path: "/{store_identifier}/orders"
    properties:
      description: "Access to orders. Needed for order query and status update"
  - location:
      type: "RESOURCE"
      path: "/{store_identifier}/stockunblock"
    properties:
      description: "Method to get the products to unblock from a given date"
  - location:
      type: "RESOURCE"
      path: "/{store_identifier}"
    properties:
      description: "Access to site operations"
x-amazon-apigateway-request-validators:
  Validate query string parameters and headers:
    validateRequestParameters: true
    validateRequestBody: false
  Validate all:
    validateRequestParameters: true
    validateRequestBody: true
